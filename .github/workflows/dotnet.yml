name: .NET CI/CD Pipeline

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      dotnet-version: ${{ steps.dotnet-version.outputs.DOTNET_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: Get .NET version from global.json
        id: dotnet-version
        run: |
          echo "::set-output name=DOTNET_VERSION::$(jq -r '.sdk.version' ../global.json)"

  build:
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: source
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ needs.setup.outputs.dotnet-version }}
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore

  test:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: source
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ needs.setup.outputs.dotnet-version }}
      - name: Run Tests with Coverage
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"

  code_quality:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: source
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ needs.setup.outputs.dotnet-version }}
      - name: Install .NET Format tool
        run: dotnet tool install -g dotnet-format
      - name: Check Code Style
        run: dotnet format --verify-no-changes --verbosity diagnostic

  coverage_report:
    needs: code_quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: source
    steps:
      - uses: actions/checkout@v3
      - name: Install Report Generator Tool
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
      - name: Generate Coverage Report
        run: reportgenerator -reports:"./Tests/**/TestResults/**/coverage.cobertura.xml" -targetdir:coverage -report types:"HtmlInline_AzurePipelines;Cobertura"
      - name: Generate Summary Report
        run: reportgenerator -reports:"./Tests/**/TestResults/**/coverage.cobertura.xml" -targetdir:coverage -reporttypes:"TextSummary"
      - name: Check Coverage Percentage
        run: |
          coveragePercentage=$(grep 'Line coverage:' coverage/Summary.txt | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$coveragePercentage < 90" | bc -l) )); then
            echo "Coverage is below 90%. It's at $coveragePercentage%"
            exit 1
          else
            echo "Coverage is above 90%. It's at $coveragePercentage%"
          fi
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ github.workspace }}/source/coverage

  deploy:
    needs: coverage_report
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: source
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./source/coverage
          publish_branch: gh-pages
          keep_files: true
